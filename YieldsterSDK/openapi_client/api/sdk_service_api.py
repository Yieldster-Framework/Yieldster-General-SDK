"""
    Yieldster SDK API

    Swagger documentation for Yieldster 2.0 SDK API's  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from YieldsterSDK.openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from YieldsterSDK.openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from YieldsterSDK.openapi_client.model.sdk_response import SDKResponse
from YieldsterSDK.openapi_client.model.ui_response import UIResponse


class SDKSERVICEApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_token_balance_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/tokenBalance',
                'operation_id': 'get_token_balance',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'vault_address',
                    'token_address',
                    'timestamp',
                    'is_date',
                ],
                'required': [
                    'vault_address',
                    'token_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'vault_address':
                        (str,),
                    'token_address':
                        (str,),
                    'timestamp':
                        (str,),
                    'is_date':
                        (bool,),
                },
                'attribute_map': {
                    'vault_address': 'vaultAddress',
                    'token_address': 'tokenAddress',
                    'timestamp': 'timestamp',
                    'is_date': 'is_Date',
                },
                'location_map': {
                    'vault_address': 'query',
                    'token_address': 'query',
                    'timestamp': 'query',
                    'is_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_token_balance_in_string_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/tokenBalance-value',
                'operation_id': 'get_token_balance_in_string',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'vault_address',
                    'token_address',
                    'timestamp',
                    'is_date',
                ],
                'required': [
                    'vault_address',
                    'token_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'vault_address':
                        (str,),
                    'token_address':
                        (str,),
                    'timestamp':
                        (str,),
                    'is_date':
                        (bool,),
                },
                'attribute_map': {
                    'vault_address': 'vaultAddress',
                    'token_address': 'tokenAddress',
                    'timestamp': 'timestamp',
                    'is_date': 'is_Date',
                },
                'location_map': {
                    'vault_address': 'query',
                    'token_address': 'query',
                    'timestamp': 'query',
                    'is_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_token_decimal_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/tokenDecimal/{tokenAddress}',
                'operation_id': 'get_token_decimal',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'token_address',
                ],
                'required': [
                    'token_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'token_address':
                        (str,),
                },
                'attribute_map': {
                    'token_address': 'tokenAddress',
                },
                'location_map': {
                    'token_address': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_token_price_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/tokenPrice',
                'operation_id': 'get_token_price',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'token_address',
                    'is_vault_token',
                    'timestamp',
                    'is_date',
                ],
                'required': [
                    'token_address',
                    'is_vault_token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'token_address':
                        (str,),
                    'is_vault_token':
                        (bool,),
                    'timestamp':
                        (str,),
                    'is_date':
                        (bool,),
                },
                'attribute_map': {
                    'token_address': 'tokenAddress',
                    'is_vault_token': 'isVaultToken',
                    'timestamp': 'timestamp',
                    'is_date': 'is_Date',
                },
                'location_map': {
                    'token_address': 'query',
                    'is_vault_token': 'query',
                    'timestamp': 'query',
                    'is_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_vault_assets_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/vaultAssets/{vaultAddress}',
                'operation_id': 'get_vault_assets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'vault_address',
                ],
                'required': [
                    'vault_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'vault_address':
                        (str,),
                },
                'attribute_map': {
                    'vault_address': 'vaultAddress',
                },
                'location_map': {
                    'vault_address': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_vault_assets_historical_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/Historical_Vault_Assets',
                'operation_id': 'get_vault_assets_historical',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'vault_address',
                    'timestamp',
                    'is_date',
                ],
                'required': [
                    'vault_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'vault_address':
                        (str,),
                    'timestamp':
                        (str,),
                    'is_date':
                        (bool,),
                },
                'attribute_map': {
                    'vault_address': 'vaultAddress',
                    'timestamp': 'timestamp',
                    'is_date': 'is_Date',
                },
                'location_map': {
                    'vault_address': 'query',
                    'timestamp': 'query',
                    'is_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_vault_nav_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/vaultNAV',
                'operation_id': 'get_vault_nav',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'vault_address',
                    'timestamp',
                    'is_date',
                ],
                'required': [
                    'vault_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'vault_address':
                        (str,),
                    'timestamp':
                        (str,),
                    'is_date':
                        (bool,),
                },
                'attribute_map': {
                    'vault_address': 'vault address',
                    'timestamp': 'timestamp',
                    'is_date': 'is_Date',
                },
                'location_map': {
                    'vault_address': 'query',
                    'timestamp': 'query',
                    'is_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.is_vault_paused_endpoint = _Endpoint(
            settings={
                'response_type': (UIResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/smart-contract/sdk/v2.0/yieldster/isPaused',
                'operation_id': 'is_vault_paused',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'vault_address',
                ],
                'required': [
                    'vault_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'vault_address':
                        (str,),
                },
                'attribute_map': {
                    'vault_address': 'vaultAddress',
                },
                'location_map': {
                    'vault_address': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_token_balance(
        self,
        vault_address,
        token_address,
        **kwargs
    ):
        """API to get Historical Token Balance of Vault  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_token_balance(vault_address, token_address, async_req=True)
        >>> result = thread.get()

        Args:
            vault_address (str): Address of the vault that want to know Token Balance
            token_address (str): Address of the Token that want to know Balance 

        Keyword Args:
            timestamp (str): Unix timestamp or date in the format DD-MM-YYYY HH:MM:SS . [optional]
            is_date (bool): Boolean value which represent the time is in the format date or not . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['vault_address'] = \
            vault_address
        kwargs['token_address'] = \
            token_address
        return self.get_token_balance_endpoint.call_with_http_info(**kwargs)

    def get_token_balance_in_string(
        self,
        vault_address,
        token_address,
        **kwargs
    ):
        """API to get Historical Token Balance of Vault in string format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_token_balance_in_string(vault_address, token_address, async_req=True)
        >>> result = thread.get()

        Args:
            vault_address (str): Address of the vault that want to know Token Balance
            token_address (str): Address of the Token that want to know Balance 

        Keyword Args:
            timestamp (str): Unix timestamp or date in the format DD-MM-YYYY HH:MM:SS . [optional]
            is_date (bool): Boolean value which represent the time is in the format date or not . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['vault_address'] = \
            vault_address
        kwargs['token_address'] = \
            token_address
        return self.get_token_balance_in_string_endpoint.call_with_http_info(**kwargs)

    def get_token_decimal(
        self,
        token_address,
        **kwargs
    ):
        """API to get token decimal  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_token_decimal(token_address, async_req=True)
        >>> result = thread.get()

        Args:
            token_address (str): Address of the token

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['token_address'] = \
            token_address
        return self.get_token_decimal_endpoint.call_with_http_info(**kwargs)

    def get_token_price(
        self,
        token_address,
        is_vault_token,
        **kwargs
    ):
        """API to get Historical Token Price of Vault  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_token_price(token_address, is_vault_token, async_req=True)
        >>> result = thread.get()

        Args:
            token_address (str): Address of the token that want to know Token Price 
            is_vault_token (bool): Whether the provided token is a vault token or not

        Keyword Args:
            timestamp (str): Unix timestamp or date in the format DD-MM-YYYY HH:MM:SS . [optional]
            is_date (bool): Boolean value which represent the time is in the format date or not . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['token_address'] = \
            token_address
        kwargs['is_vault_token'] = \
            is_vault_token
        return self.get_token_price_endpoint.call_with_http_info(**kwargs)

    def get_vault_assets(
        self,
        vault_address,
        **kwargs
    ):
        """API to get Assets of a vault  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_assets(vault_address, async_req=True)
        >>> result = thread.get()

        Args:
            vault_address (str): Address of the vault that want to know Assets 

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['vault_address'] = \
            vault_address
        return self.get_vault_assets_endpoint.call_with_http_info(**kwargs)

    def get_vault_assets_historical(
        self,
        vault_address,
        **kwargs
    ):
        """API to get Historical Vault Assets of Vault  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_assets_historical(vault_address, async_req=True)
        >>> result = thread.get()

        Args:
            vault_address (str): Address of the vault 

        Keyword Args:
            timestamp (str): Unix timestamp or date in the format DD-MM-YYYY HH:MM:SS . [optional]
            is_date (bool): Boolean value which represent the time is in the format date or not . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['vault_address'] = \
            vault_address
        return self.get_vault_assets_historical_endpoint.call_with_http_info(**kwargs)

    def get_vault_nav(
        self,
        vault_address,
        **kwargs
    ):
        """API to get Historical NAV of a vault  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vault_nav(vault_address, async_req=True)
        >>> result = thread.get()

        Args:
            vault_address (str): Address of the vault that want to know vault address 

        Keyword Args:
            timestamp (str): Unix timestamp or date in the format DD-MM-YYYY HH:MM:SS . [optional]
            is_date (bool): Boolean value which represent the time is in the format date or not . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['vault_address'] = \
            vault_address
        return self.get_vault_nav_endpoint.call_with_http_info(**kwargs)

    def is_vault_paused(
        self,
        vault_address,
        **kwargs
    ):
        """API to check whether the vault is paused  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.is_vault_paused(vault_address, async_req=True)
        >>> result = thread.get()

        Args:
            vault_address (str): Vault address

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UIResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['vault_address'] = \
            vault_address
        return self.is_vault_paused_endpoint.call_with_http_info(**kwargs)


"""
    Yieldster SDK API

    Swagger documentation for Yieldster 2.0 SDK API's  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from YieldsterSDK.openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from YieldsterSDK.openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from YieldsterSDK.openapi_client.model.sdk_response import SDKResponse


class PATHEXECUTIONSERVICEApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.execute_path_for_test_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/path-execution/execute-path-for-test',
                'operation_id': 'execute_path_for_test',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'from_token_amount',
                    'from_token',
                    'to_token',
                    'vault_address',
                ],
                'required': [
                    'from_token_amount',
                    'from_token',
                    'to_token',
                    'vault_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'from_token_amount':
                        (int,),
                    'from_token':
                        (str,),
                    'to_token':
                        (str,),
                    'vault_address':
                        (str,),
                },
                'attribute_map': {
                    'from_token_amount': 'fromTokenAmount',
                    'from_token': 'fromToken',
                    'to_token': 'toToken',
                    'vault_address': 'vaultAddress',
                },
                'location_map': {
                    'from_token_amount': 'query',
                    'from_token': 'query',
                    'to_token': 'query',
                    'vault_address': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.execute_strategy_path_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/path-execution/v2.0/yieldster/execute-strategy-path',
                'operation_id': 'execute_strategy_path',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'path_id',
                    'amount',
                    'vault_address',
                    'from_token_address',
                    'to_token_address',
                ],
                'required': [
                    'path_id',
                    'amount',
                    'vault_address',
                    'from_token_address',
                    'to_token_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'path_id':
                        (str,),
                    'amount':
                        (int,),
                    'vault_address':
                        (str,),
                    'from_token_address':
                        (str,),
                    'to_token_address':
                        (str,),
                },
                'attribute_map': {
                    'path_id': 'pathId',
                    'amount': 'Amount',
                    'vault_address': 'vaultAddress',
                    'from_token_address': 'fromTokenAddress',
                    'to_token_address': 'toTokenAddress',
                },
                'location_map': {
                    'path_id': 'query',
                    'amount': 'query',
                    'vault_address': 'query',
                    'from_token_address': 'query',
                    'to_token_address': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.fetch_all_paths_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/path-execution/v2.0/yieldster/fetch-all-paths',
                'operation_id': 'fetch_all_paths',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.find_paths_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/path-execution/v2.0/yieldster/fetch-particular-paths',
                'operation_id': 'find_paths',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'from_token_amount',
                    'from_token',
                    'to_token',
                ],
                'required': [
                    'from_token_amount',
                    'from_token',
                    'to_token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'from_token_amount':
                        (str,),
                    'from_token':
                        (str,),
                    'to_token':
                        (str,),
                },
                'attribute_map': {
                    'from_token_amount': 'fromTokenAmount',
                    'from_token': 'fromToken',
                    'to_token': 'toToken',
                },
                'location_map': {
                    'from_token_amount': 'query',
                    'from_token': 'query',
                    'to_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.gas_estimator_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/path-execution/gas-estimate',
                'operation_id': 'gas_estimator',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'from_token_amount',
                    'from_token',
                    'to_token',
                ],
                'required': [
                    'from_token_amount',
                    'from_token',
                    'to_token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'from_token_amount':
                        (str,),
                    'from_token':
                        (str,),
                    'to_token':
                        (str,),
                },
                'attribute_map': {
                    'from_token_amount': 'fromTokenAmount',
                    'from_token': 'fromToken',
                    'to_token': 'toToken',
                },
                'location_map': {
                    'from_token_amount': 'query',
                    'from_token': 'query',
                    'to_token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sample_erc20_token_balance_endpoint = _Endpoint(
            settings={
                'response_type': (SDKResponse,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/path-execution/erctoken-balance',
                'operation_id': 'sample_erc20_token_balance',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.sample_function_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/path-execution/test-map',
                'operation_id': 'sample_function',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def execute_path_for_test(
        self,
        from_token_amount,
        from_token,
        to_token,
        vault_address,
        **kwargs
    ):
        """execute_path_for_test  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.execute_path_for_test(from_token_amount, from_token, to_token, vault_address, async_req=True)
        >>> result = thread.get()

        Args:
            from_token_amount (int): amount of the initial token that you plan to provide for execution
            from_token (str): Symbol of the initial token that you are providing for execution
            to_token (str): Symbol of the final token that you wish to receive at the end of the execution
            vault_address (str): Symbol of the final token that you wish to receive at the end of the execution

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['from_token_amount'] = \
            from_token_amount
        kwargs['from_token'] = \
            from_token
        kwargs['to_token'] = \
            to_token
        kwargs['vault_address'] = \
            vault_address
        return self.execute_path_for_test_endpoint.call_with_http_info(**kwargs)

    def execute_strategy_path(
        self,
        path_id,
        amount,
        vault_address,
        from_token_address,
        to_token_address,
        **kwargs
    ):
        """API to execute strategy path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.execute_strategy_path(path_id, amount, vault_address, from_token_address, to_token_address, async_req=True)
        >>> result = thread.get()

        Args:
            path_id (str): Id of the path which you wish to execute
            amount (int): amount of the initial token that you plan to provide for execution
            vault_address (str): Address of the vault through which we need to initiate the execution
            from_token_address (str): Address of the initial token
            to_token_address (str): Address of the final token

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['path_id'] = \
            path_id
        kwargs['amount'] = \
            amount
        kwargs['vault_address'] = \
            vault_address
        kwargs['from_token_address'] = \
            from_token_address
        kwargs['to_token_address'] = \
            to_token_address
        return self.execute_strategy_path_endpoint.call_with_http_info(**kwargs)

    def fetch_all_paths(
        self,
        **kwargs
    ):
        """API to get all available execution paths  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_all_paths(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.fetch_all_paths_endpoint.call_with_http_info(**kwargs)

    def find_paths(
        self,
        from_token_amount,
        from_token,
        to_token,
        **kwargs
    ):
        """API to get paths that lead us from start token to end token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_paths(from_token_amount, from_token, to_token, async_req=True)
        >>> result = thread.get()

        Args:
            from_token_amount (str): amount of the initial token that you plan to provide for execution
            from_token (str): Symbol of the initial token that you are providing for execution
            to_token (str): Symbol of the final token that you wish to receive at the end of the execution

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['from_token_amount'] = \
            from_token_amount
        kwargs['from_token'] = \
            from_token
        kwargs['to_token'] = \
            to_token
        return self.find_paths_endpoint.call_with_http_info(**kwargs)

    def gas_estimator(
        self,
        from_token_amount,
        from_token,
        to_token,
        **kwargs
    ):
        """gas_estimator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.gas_estimator(from_token_amount, from_token, to_token, async_req=True)
        >>> result = thread.get()

        Args:
            from_token_amount (str): amount of the initial token that you plan to provide for execution
            from_token (str): Symbol of the initial token that you are providing for execution
            to_token (str): Symbol of the final token that you wish to receive at the end of the execution

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['from_token_amount'] = \
            from_token_amount
        kwargs['from_token'] = \
            from_token
        kwargs['to_token'] = \
            to_token
        return self.gas_estimator_endpoint.call_with_http_info(**kwargs)

    def sample_erc20_token_balance(
        self,
        **kwargs
    ):
        """sample_erc20_token_balance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sample_erc20_token_balance(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SDKResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.sample_erc20_token_balance_endpoint.call_with_http_info(**kwargs)

    def sample_function(
        self,
        **kwargs
    ):
        """sample_function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sample_function(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.sample_function_endpoint.call_with_http_info(**kwargs)


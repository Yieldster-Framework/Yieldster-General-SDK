"""
    Yieldster SDK API

    Swagger documentation for Yieldster 2.0 SDK API's  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from YieldsterSDK.openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from YieldsterSDK.openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from YieldsterSDK.openapi_client.model.response import Response
from YieldsterSDK.openapi_client.model.sdk_response import SDKResponse


class Erc20TransactionControllerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.set_transaction_details1_endpoint = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'bearer-jwt'
                ],
                'endpoint_path': '/Erc20Transaction/v2.0/yieldster/save-Erc20-transaction-details',
                'operation_id': 'set_transaction_details1',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'token_name',
                    'token_symbol',
                    'token_decimal',
                    'hash',
                    'time_stamp',
                    'block_numer',
                    'transaction_index',
                    'nonce',
                    '_from',
                    'to',
                    'value',
                    'index',
                    'gas',
                    'gas_price',
                    'gas_used',
                    'cumulative_gas_used',
                    'input',
                    'confirmations',
                    'contract_address',
                ],
                'required': [
                    'token_name',
                    'token_symbol',
                    'token_decimal',
                    'hash',
                    'time_stamp',
                    'block_numer',
                    'transaction_index',
                    'nonce',
                    '_from',
                    'to',
                    'value',
                    'index',
                    'gas',
                    'gas_price',
                    'gas_used',
                    'cumulative_gas_used',
                    'input',
                    'confirmations',
                    'contract_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'token_name':
                        (str,),
                    'token_symbol':
                        (str,),
                    'token_decimal':
                        (str,),
                    'hash':
                        (str,),
                    'time_stamp':
                        (str,),
                    'block_numer':
                        (int,),
                    'transaction_index':
                        (str,),
                    'nonce':
                        (str,),
                    '_from':
                        (str,),
                    'to':
                        (str,),
                    'value':
                        (str,),
                    'index':
                        (str,),
                    'gas':
                        (str,),
                    'gas_price':
                        (str,),
                    'gas_used':
                        (str,),
                    'cumulative_gas_used':
                        (str,),
                    'input':
                        (str,),
                    'confirmations':
                        (str,),
                    'contract_address':
                        (str,),
                },
                'attribute_map': {
                    'token_name': 'tokenName',
                    'token_symbol': 'tokenSymbol',
                    'token_decimal': 'tokenDecimal',
                    'hash': 'hash',
                    'time_stamp': 'timeStamp',
                    'block_numer': 'blockNumer',
                    'transaction_index': 'TransactionIndex',
                    'nonce': 'nonce',
                    '_from': 'from',
                    'to': 'to',
                    'value': 'value',
                    'index': 'index',
                    'gas': 'gas',
                    'gas_price': 'gasPrice',
                    'gas_used': 'gasUsed',
                    'cumulative_gas_used': 'cumulativeGasUsed',
                    'input': 'input',
                    'confirmations': 'Confirmations',
                    'contract_address': 'contractAddress',
                },
                'location_map': {
                    'token_name': 'query',
                    'token_symbol': 'query',
                    'token_decimal': 'query',
                    'hash': 'query',
                    'time_stamp': 'query',
                    'block_numer': 'query',
                    'transaction_index': 'query',
                    'nonce': 'query',
                    '_from': 'query',
                    'to': 'query',
                    'value': 'query',
                    'index': 'query',
                    'gas': 'query',
                    'gas_price': 'query',
                    'gas_used': 'query',
                    'cumulative_gas_used': 'query',
                    'input': 'query',
                    'confirmations': 'query',
                    'contract_address': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def set_transaction_details1(
        self,
        token_name,
        token_symbol,
        token_decimal,
        hash,
        time_stamp,
        block_numer,
        transaction_index,
        nonce,
        _from,
        to,
        value,
        index,
        gas,
        gas_price,
        gas_used,
        cumulative_gas_used,
        input,
        confirmations,
        contract_address,
        **kwargs
    ):
        """API to save Erc20Transaction details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_transaction_details1(token_name, token_symbol, token_decimal, hash, time_stamp, block_numer, transaction_index, nonce, _from, to, value, index, gas, gas_price, gas_used, cumulative_gas_used, input, confirmations, contract_address, async_req=True)
        >>> result = thread.get()

        Args:
            token_name (str): tokenName
            token_symbol (str): tokenSymbol
            token_decimal (str): tokenDecimal
            hash (str): hash
            time_stamp (str): timeStamp
            block_numer (int): block number of the transaction
            transaction_index (str): TransactionIndex
            nonce (str): nonce
            _from (str): from
            to (str): to
            value (str): value
            index (str): index
            gas (str): gas
            gas_price (str): gasPrice
            gas_used (str): gasUsed
            cumulative_gas_used (str): cumulativeGasUsed
            input (str): input
            confirmations (str): Confirmations
            contract_address (str): contractAddress

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['token_name'] = \
            token_name
        kwargs['token_symbol'] = \
            token_symbol
        kwargs['token_decimal'] = \
            token_decimal
        kwargs['hash'] = \
            hash
        kwargs['time_stamp'] = \
            time_stamp
        kwargs['block_numer'] = \
            block_numer
        kwargs['transaction_index'] = \
            transaction_index
        kwargs['nonce'] = \
            nonce
        kwargs['_from'] = \
            _from
        kwargs['to'] = \
            to
        kwargs['value'] = \
            value
        kwargs['index'] = \
            index
        kwargs['gas'] = \
            gas
        kwargs['gas_price'] = \
            gas_price
        kwargs['gas_used'] = \
            gas_used
        kwargs['cumulative_gas_used'] = \
            cumulative_gas_used
        kwargs['input'] = \
            input
        kwargs['confirmations'] = \
            confirmations
        kwargs['contract_address'] = \
            contract_address
        return self.set_transaction_details1_endpoint.call_with_http_info(**kwargs)

